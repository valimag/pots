%% @doc Модуль `rss_reader` предназначен для чтения и обработки RSS-лент.
%% Он запускает процесс, который циклически запрашивает RSS-ленту, 
%% проверяет ее на соответствие формату RSS 2.0 и отправляет данные в очередь RSS.

-module(rss_reader). % Определение модуля rss_reader.

-include("logging.hrl"). % Подключение файла заголовков для логирования.

-compile(export_all). % Директива компилятора, экспортирующая все функции модуля.

-define(RETRIEVE_INTERVAL, 200000). % Определение интервала времени (в миллисекундах) между запросами к RSS-ленте.

%% @spec start(Url::string(), QPid::pid()) -> pid().
%% @brief Запускает процесс чтения RSS-ленты.
%% @param Url URL RSS-ленты для чтения.
%% @param QPid Идентификатор процесса очереди RSS, в который будут отправляться прочитанные данные.
start(Url, QPid) ->
    inets:start(), % Запуск приложения inets для возможности отправки HTTP-запросов.
    spawn(?MODULE, server, [Url, QPid]). % Создание процесса для циклического чтения RSS-ленты.

%% @spec server(Url::string(), QPid::pid()) -> no_return().
%% @brief Функция циклически запрашивает RSS-ленту, обрабатывает полученные данные и отправляет их в очередь RSS.
%% @param Url URL RSS-ленты для чтения.
%% @param QPid Идентификатор процесса очереди RSS, в который будут отправляться прочитанные данные.
server(Url, QPid) ->
    {ok, {Status = {_, Code, _}, _, Load}} = httpc:request(Url), % Отправка HTTP-запроса к указанному URL и получение ответа.

    case Code of % Проверка HTTP-статус кода ответа.
        200 -> % Если код 200, значит запрос успешен.
            {Feed, _} = xmerl_scan:string(Load), % Парсинг тела ответа как строку XML.

            case rss_parse:is_rss2_feed(Feed) of % Проверка, является ли прочитанный документ валидным RSS 2.0.
                ok -> 
                    rss_queue:add_feed(QPid, Feed), % Отправка прочитанных данных в очередь RSS.
                    receive % Ожидание перед следующим запросом.
                        after ?RETRIEVE_INTERVAL -> 
                            server(Url, QPid) % Рекурсивный вызов для следующего запроса после паузы.
                    end;
                _ -> erlang:exit(not_rss2_feed) % Завершение процесса, если документ не соответствует формату RSS 2.0.
            end; 
        _ -> erlang:exit(Code) % Завершение процесса с кодом ошибки, если HTTP-запрос неуспешен.
    end.
